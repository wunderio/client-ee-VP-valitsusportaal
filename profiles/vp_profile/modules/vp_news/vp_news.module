<?php
/**
 * @file
 *
 */

include_once 'vp_news.features.inc';

/**
 * Implements hook_views_pre_render().
 */
function vp_news_views_pre_render(&$view) {
  if ($view->name == 'top_news_tabs') {
    $filters = variable_get('vp_news_filters');

    foreach ($view->result as $key => $row) {
      if (!in_array($row->tid, $filters)) {
        unset($view->result[$key]);
      }
    }

    $all = (object) array(
      'taxonomy_term_data_name' => t('All'),
      'taxonomy_term_data_vid' => NULL,
      'tid' => 'all',
      'taxonomy_vocabulary_machine_name' => NULL,
    );
    $view->result[] = $all;
  }
}

/**
 * Implements hook_views_pre_view().
 */
function vp_news_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name == 'news_rss_feed') {
    if (isset($_GET['keyword'])) {
      $_GET['body'] = $_GET['keyword'];
    }
  }
}

/**
 * Implements hook_js_alter().
 */
function vp_news_js_alter(&$js) {
  $js['settings']['data'][] = array(
    'better_exposed_filters' => array('bef_dateformat' => 'dd-mm-yy'),
  );
}

/**
 * Implements hook_views_query_alter().
 */
function vp_news_views_query_alter(&$view, &$query) {
  if ($view->name == 'news_rss_feed' && isset($_GET['body']) && !empty($_GET['body'])) {
    $query->where[2]['conditions'][1]['value'] = '%' . $_GET['body'] . '%';
  }
  if ($view->name == 'news') {
    if (empty($view->exposed_input['date']) || $view->exposed_input['date'] === 'All') {
      unset($query->where[4]);
    }
    elseif ($view->exposed_input['date'] == 4) {
      // Date widget uses / slashes so assuming them here. mm.
      $arrStart = explode('/', $view->exposed_input['date_custom']['min']);
      $arrEnd = explode('/', $view->exposed_input['date_custom']['max']);
      $view->exposed_input['date_custom']['min'] = $arrStart[2] . '-' . $arrStart[1] . '-' . $arrStart[0];
      $view->exposed_input['date_custom']['max'] = $arrEnd[2] . '-' . $arrEnd[1] . '-' . $arrEnd[0];

      // Exposed input format has been made non-arbitrary. YYYY-mm-dd.
      $start = strtotime($view->exposed_input['date_custom']['min']);
      $end = strtotime($view->exposed_input['date_custom']['max']);

      // Force a start date if date range chosen without start date. mm.
      if ($start === FALSE) {
        // Non-arbitrary arbitrary date;).
        $start = strtotime('1918-02-24');
      }
      // Force an end date, if necessary. mm.
      if ($end === FALSE) {
        $end = REQUEST_TIME;
      }

      // The two if-then conditionals just above force this into elseif. mm.
      if ($start === FALSE) {
        $query->where[4]['conditions'][0]['field'] = 'node.created < ' . $end;
      }
      elseif ($end === FALSE) {
        $query->where[4]['conditions'][0]['field'] = 'node.created > ' . $start;
      }
      elseif ($end !== FALSE && $start !== FALSE) {
        unset($query->where[4]['conditions'][0]);
        $query->where[4]['conditions'][1]['field'] = 'node.created BETWEEN ' . $start . ' AND ' . $end;

        // Adding these two since the query was not actually working without
        // them. mm 04feb15.
        $query->where[4]['conditions'][1]['value'] = array();
        $query->where[4]['conditions'][1]['operator'] = 'formula';

      }
    }
    else {
      unset($query->where[4]['conditions'][1]);

      if ($view->exposed_input['date'] == 1) {
        $min_date = '-7 days';
      }
      if ($view->exposed_input['date'] == 2) {
        $min_date = '-30 days';
      }
      if ($view->exposed_input['date'] == 3) {
        $min_date = '-12 months';
      }
      $query->where[4]['conditions'][0]['field'] = 'node.created BETWEEN ' . strtotime($min_date) . ' AND ' . REQUEST_TIME;
    }
  }
}

/**
 * Implements hook_views_pre_build().
 */
function vp_news_views_pre_build(&$view) {
  if ($view->name == 'news') {
    if (!isset($_GET['source'])) {
      $field_instance = field_info_instance('node', 'field_source', 'news');
      $_GET['source'] = $field_instance['default_value'][0]['tid'];
    }
  }
}

/**
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function vp_news_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form_state['view']->name == 'news') {
    global $base_url;
    global $language;

    // Because of this issue 203418400731227 submit button is 'translated' like
    // this.
    $form['submit']['#value'] = t($form['submit']['#value']);

    $field_source_instance = field_info_instance('node', 'field_source', 'news');
    $form['source']['#default_value'] = $field_source_instance['default_value'][0]['tid'];
    $form['source']['#options'] = array(
      $field_source_instance['default_value'][0]['tid'] => t('Search from !site', array('!site' => parse_url($base_url, PHP_URL_HOST))),
      'All' => t('Search from all Government Portal sites'),
    );
    $form['body']['#attributes']['class'][] = 'element-hidden';
    $form['body_value_op']['#attributes']['class'][] = 'element-hidden';
    $form['#validate'] = array_merge(array('vp_news_form_views_exposed_body'), $form['#validate']);

    if ($language->language !== 'en') {
      // Adding isset() to avoid php undefined index warnings. mm 22jan15.
      if (isset($form['#info']['filter-tid_i18n']['label'])) {
        $form['#info']['filter-tid_i18n']['label'] = t($form['#info']['filter-tid_i18n']['label']);
      }
      if (isset($form['#info']['filter-field_news_subject_tid_i18n']['label'])) {
        $form['#info']['filter-field_news_subject_tid_i18n']['label'] = t($form['#info']['filter-field_news_subject_tid_i18n']['label']);
      }
      if (isset($form['#info']['filter-date']['label'])) {
        $form['#info']['filter-date']['label'] = t($form['#info']['filter-date']['label']);
      }
      if (isset($form['#info']['filter-title']['label'])) {
        $form['#info']['filter-title']['label'] = t($form['#info']['filter-title']['label']);
      }
    }

    // Hide empty subjects.
    if (isset($form['subject']['#options'])) {
      foreach ($form['subject']['#options'] as $tid => $title) {
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'news')
          ->propertyCondition('status', 1)
          ->fieldCondition('field_news_subject', 'tid', $tid)
          ->range(0, 1)
          ->addMetaData('account', user_load(1));
        $result = $query->execute();
        if (!isset($result['node'])) {
          unset($form['subject']['#options'][$tid]);
        }
      }
    }
  }
}

/**
 * @param $form
 * @param $form_state
 */
function vp_news_form_views_exposed_body($form, &$form_state) {
  if ($form_state['view']->name == 'news') {
    $form_state['values']['body'] = $form_state['values']['title'];
    $form_state['values']['body_value_op'] = $form_state['values']['title_op'];
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Change the location of simplenews_newsletter_body.tpl to vp_news module.
 */
function vp_news_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['simplenews_newsletter_body'])) {
    $theme_registry['simplenews_newsletter_body']['path'] = drupal_get_path('module', 'vp_news') . '/templates';
  }

  if (isset($theme_registry['simplenews_newsletter_footer'])) {
    $theme_registry['simplenews_newsletter_footer']['path'] = drupal_get_path('module', 'vp_news') . '/templates';
  }
}

/**
 * Implements hook_menu().
 */
function vp_news_menu() {
  $items = array();

  $items['admin/structure/frontpage-news-block-filters'] = array(
    'title' => 'Frontpage news block filters',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vp_news_page', NULL),
    'access arguments' => array('administer vp news'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function vp_news_permission() {
  return array(
    'administer vp news' => array(
      'title' => t('Administer vp news'),
    ),
  );
}

/**
 * Frontpage news block filters administration form.
 */
function vp_news_page() {
  $form = array();

  $vocabulary = taxonomy_vocabulary_machine_name_load('news_types');
  $terms = taxonomy_get_tree($vocabulary->vid);
  $options = array();

  foreach ($terms as $term) {
    $options[$term->tid] = t($term->name);
  }

  $options['all'] = t('All');

  $form['vp_news_filters'] = array(
    '#title' => t('Pick filters for the block'),
    '#type' => 'checkboxes',
    '#default_value' => variable_get('vp_news_filters', array()),
    '#options' => $options,
  );

  return system_settings_form($form);
}
