<?php
/**
 * @file
 * Code for the VP Weekly Schedule feature.
 */

include_once 'vp_weekly_schedule.features.inc';

/**
 * Implements hook_theme().
 */
function vp_weekly_schedule_theme() {
  return array(
    'scs_newsletter_eelinfo' => array(
      'variables' => array('nodes' => array(), 'toc' => FALSE),
      'path' => drupal_get_path('theme', 'vp_theme') . '/templates',
      'template' => 'scs-newsletter-eelinfo',
    ),
  );
}


/**
 * Implements hook_custom_theme().
 */
function vp_weekly_schedule_custom_theme() {
  // Only run this in admin after coming from newsletter creation page.
  $one = arg(1);
  $two = arg(2);
  if ($one == 'add' && $two == 'news' && strpos($_SERVER['HTTP_REFERER'], 'creation') !== FALSE) {
    return 'vp_theme';
  }
}


/**
 * Preprocess for scs_newsletter_eelinfo.
 */
function vp_weekly_schedule_preprocess_scs_newsletter_eelinfo(&$vars) {
  // Add Table of Contents (if required).
  if ($vars['toc']) {
    $vars['toc'] = theme('scs_toc', array('nodes' => $vars['nodes']));
  }
  // Render each node using the correct view mode.
  $view_mode = variable_get('scs_view_mode', 'scs');
  // Get source taxonomy terms and group these mofos.
  $terms = _vp_weekly_schedule_get_eelinfo_groupings();

  $ordered_nodes = _vp_weekly_schedule_get_eelinfo_order_nodes($vars['nodes']);

  // This loop builds grouping.
  foreach ($terms as $term) {
    // @todo. Do not like variable in t() function.
    $vars['taxonomy_heading'][$term->tid]['heading'] = t($term->name);
    $vars['taxonomy_heading'][$term->tid]['has_contents'] = FALSE;
    // This loop goes through eelinfo nodes.
    foreach ($ordered_nodes as $nid => $node) {
      if ($node->field_weekly_schedule_source[LANGUAGE_NONE][0]['tid'] === $term->tid) {
        $build = node_view($node, $view_mode, $node->language);
        // Strip out contextual links.
        unset($build['#node']->title);
        unset($build['#contextual_links']['node']);
        $vars['sisud'][$term->tid][$nid] = $build;
        $vars['taxonomy_heading'][$term->tid]['has_contents'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Copied from simplenews_content_selection module.
 */
function vp_weekly_schedule_form_node_form_alter(&$form, &$form_state) {
  // Check that we are creating a newsletter and that we come from the
  // admin/content/node
  if (!empty($form['#node_edit_form'])
    && in_array($form['type']['#value'], simplenews_get_content_types())
    && $form_state['input']['op'] = t('Create newsletter')
      && isset($form_state['input']['nodes'])
  ) {
    $nodes = node_load_multiple(array_keys($form_state['input']['nodes']));
    $form['body'][LANGUAGE_NONE][0]['#default_value'] = theme('scs_newsletter_eelinfo', array(
      'nodes' => $nodes,
      'toc' => empty($form_state['input']['scs_toc']) ? FALSE : TRUE,
    ));
  }
}


/**
 * Implements hook_views_query_alter().
 */
function vp_weekly_schedule_views_query_alter(&$view, &$query) {
  if ($view->name == 'weekly_schedule') {
    // Views bug? Views query kasutab "< Sunday", ehk Sunday ise ei kuva.
    // Peaks olema <= lÃµppajaks.
    $query->where[0]['conditions'][0]['field'] = "DATE_FORMAT(field_data_field_weekly_schedule_date.field_weekly_schedule_date_value, '%Y-%m-%d %H:%i:%s') >= :field_data_field_weekly_schedule_date_field_weekly_schedule_date_value AND DATE_FORMAT(field_data_field_weekly_schedule_date.field_weekly_schedule_date_value, '%Y-%m-%d %H:%i:%s') <= :field_data_field_weekly_schedule_date_field_weekly_schedule_date_value1";
  }
}


/**
 * Helper function to get eelinfo grouped into taxonomy groupings.
 */
function _vp_weekly_schedule_get_eelinfo_groupings() {
  // Taxonomy vocab 'source' has the terms we need.
  $vocab = taxonomy_vocabulary_machine_name_load('source');
  $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocab->vid));

  // Rebuild the array to sort it nicely.
  foreach ($terms as $term) {
    $sorted_terms[$term->weight] = $term;
  }

  // Do the sorting.
  ksort($sorted_terms);

  return $sorted_terms;
}

/**
 * Helper function to order the nodes by date.
 */
function _vp_weekly_schedule_get_eelinfo_order_nodes($nodes) {
  foreach ($nodes as $node) {
    $sort_this[$node->nid] = $node->field_weekly_schedule_date[LANGUAGE_NONE][0]['value'];
  }

  asort($sort_this);
  $nids = array_keys($sort_this);

  foreach ($nids as $nid) {
    $ordered_nodes[$nid] = node_load($nid);
  }
  return $ordered_nodes;
}
