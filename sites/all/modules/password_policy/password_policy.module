<?php
/**
 * @file
 * Enforce password security policies.
 */

/**
 * Implements hook_menu().
 */
function password_policy_menu() {
  $items['password_policy/check'] = array(
    'page callback' => 'password_policy_ajax_check',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * AJAX callback to check password against applicable policies.
 */
function password_policy_ajax_check() {
  // Decode password which javascript ran encodeURIComponent.
  $password = rawurldecode($_POST['password']);

  // Using this user is not always going to work.
  global $user;
  $account = $user;
  password_policy_user_load(array($account->uid => $account));
  $policies = PasswordPolicy::matched_policies($account);

  // Exit prematurely if no policies are usable.
  if (count($policies) == 0) {
    return;
  }

  $total = 0;
  $errors = array();
  foreach ($policies as $policy) {
    $total += count($policy->message());
    $errors = $errors + $policy->check($password, $account);
  }
  $sus_count = $total - count($errors);

  $score = ($sus_count / $total) * 100;
  $msg = '';

  if (!empty($errors)) {
    $msg .= t('Password does not match the following requirements:');
    $msg .= theme('item_list', array('items' => $errors));
  }

  $return = array(
    'message' => $msg,
    'strength' => $score,
    'indicatorText' => t('@sus_count of @total', array('@sus_count' => $sus_count, '@total' => $total)),
  );

  drupal_json_output($return);
}

/**
 * Implements hook_ctools_plugin_api().
 */
function password_policy_ctools_plugin_api($module, $api) {
  if ($module == "password_policy" && $api == "default_password_policy") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function password_policy_ctools_plugin_type() {
  return array(
    'constraint' => array(
      'defaults' => array(
        'class' => 'PasswordPolicyConstraint',
      ),
    ),
    'condition' => array(
      'defaults' => array(
        'class' => 'PasswordPolicyCondition',
      ),
    ),
    'item' => array(
      'defaults' => array(
        'class' => 'PasswordPolicyItem',
      ),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function password_policy_ctools_plugin_directory($module, $plugin) {
  if ($module == 'password_policy') {
    return "plugins/$plugin";
  }
  if ($module == 'ctools') {
    return "plugins/$plugin";
  }
}

function password_policy_admin_settings(&$form, &$form_state) {
  $item = $form_state['item'];
  $policy = new PasswordPolicy($item);
  $form = $policy->admin_form($form, $form_state);
  $form_state['policy'] = $policy;
  return $form;
}

function password_policy_admin_validate(&$form, &$form_state) {
  return TRUE;
}

function password_policy_admin_submit(&$form, &$form_state) {
  $policy = $form_state['policy'];
  $policy->admin_form_submit($form, $form_state);
}

/**
 * Implements hook_permission().
 */
function password_policy_permission() {
  return array(
    'administer password policy' => array(
      'title' => t('Administer password policy'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function password_policy_cron() {
  $policies = PasswordPolicy::all_policies();
  foreach ($policies as $policy) {
    $policy->cron();
  }
}

/**
 * Implements hook_init().
 */
function password_policy_init() {
  // Checking to see if the incoming url is approved by password_policy_goto().
  global $user;

  $goto = &drupal_static('password_policy_goto');
  if (isset($_SESSION['password_policy_goto'], $_GET['password_policy_goto']) && ($_SESSION['password_policy_goto'] === $_GET['password_policy_goto'])) {
    $goto = TRUE;
    $_SESSION['password_policy_goto'] = FALSE;
  }
  else {
    unset($goto);
  }

  $policies = PasswordPolicy::matched_policies($user);
  foreach ($policies as $policy) {
    $policy->init($user);
  }
}

/**
 * Replacement for drupal goto().
 *
 * The key item is that when used on redirect any other call to
 * password_policy_goto() will not redirect. This should be used for items that
 * are redirect a user to a login screen or such so that if more then one plugin
 * are active the do not create infinite redirects.
 */
function password_policy_goto($uri, $options = array(), $http_response_code = NULL) {
  $goto = &drupal_static(__FUNCTION__);

  if (!isset($goto)) {
    $_SESSION['password_policy_goto'] = uniqid();
    $options['query']['password_policy_goto'] = $_SESSION['password_policy_goto'];
    drupal_goto($uri, $options, $http_response_code);
  }
}

function password_policy_password_element_alter(&$element, $account) {
  $items = array();
  $policies = PasswordPolicy::matched_policies($account);

  foreach ($policies as $policy) {
    $items = $items + $policy->message();
  }

  // Only alter description if policy messages are present.
  if (count($items)) {
    $element['#description'] = (isset($element['#description']) ? $element['#description'] : '') .
      theme('item_list', array(
        'items' => $items,
        'title' => t('Passwords must match the following requirements -'),
        'attributes' => array(
          'id' => 'password-policy-requirements',
        ),
      )
    );
  }

  // Attach password evaluation logic and ensure it's added after user.js.
  $element['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'password_policy') . '/password_policy.js',
    'weight' => 10,
  );
}

/**
 * Implements hook_js_alter().
 */
function password_policy_js_alter(&$javascript) {
  // Because Drupal.settings cannot use a weight attribute, we must alter after
  // the page has been fully loaded.
  $javascript['settings']['data'][] = array(
    'password' => array(
      'strengthTitle' => t('Password compliance:'),
    ),
    'type' => 'setting',
  );
}

/**
 * Implements hook_form_alter().
 */
function password_policy_form_alter(&$form, $form_state, $form_id) {
  if (!in_array($form_id, array('user_profile_form', 'user_register_form'))) {
    return;
  }

  password_policy_password_element_alter($form['account']['pass'], $form['#user']);
  $form['#validate'][] = 'password_policy_user_profile_form_validate';
  $form['#submit'][] = 'password_policy_password_submit';
}

function password_policy_user_profile_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['pass'])) {
    $account = $form['#user'];
    $policies = PasswordPolicy::matched_policies($account);
    $errors = array();
    foreach ($policies as $policy) {
      $errors = $errors + $policy->check($form_state['values']['pass'], $account);
    }
    if (!empty($errors)) {
      form_set_error('pass', theme('item_list', array('items' => $errors)));
    }
  }
}

/**
 * Stores user password hash.
 *
 * @param int $uid
 *   User id.
 * @param string $pass
 *   Clear text password.
 */
function _password_policy_store_password($uid, $pass, $do_not_hash = FALSE) {
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
  $history = (object) array(
    'uid' => $uid,
    'pass' => $do_not_hash ? $pass : user_hash_password(trim($pass)),
    'created' => time(),
    'data' => array(),
  );
  password_policy_update_password_history($history);
}

/**
 * Implements hook_user_insert().
 */
function password_policy_user_insert(&$edit, $account, $category) {
  if (!empty($edit['pass'])) {
    // New users do not yet have an uid during the validation step, but they do
    // have at this insert step. Store their first password in the system for
    // use with the history constraint (if used).
    if ($account->uid) {
      _password_policy_store_password($account->uid, $edit['pass'], TRUE);
    }
  }
}

/**
 * Password save submit handler.
 */
function password_policy_password_submit($form, &$form_state) {
  global $user;

  $values = $form_state['values'];
  $account = isset($form['#user']) ? $form['#user'] : (object) array('uid' => 0);

  // Track the hashed password values which can then be used in the history
  // constraint.
  if ($account->uid && !empty($values['pass'])) {
    _password_policy_store_password($account->uid, $values['pass']);
  }
}

/**
 * Implements hook_user_load().
 *
 * Add password history to user. Used by past_password and expire plugins.
 */
function password_policy_user_load($accounts) {
  // Insure all accounts have a history array.
  foreach ($accounts as $account) {
    $account->password_history = array();
  }

  $query = db_select('password_policy_history', 'p');
  $query
    ->condition('p.uid', array_keys($accounts))
    ->fields('p', array('uid', 'pass', 'created'))
    ->orderBy('created', 'DESC');

  foreach ($query->execute() as $record) {
    $accounts[$record->uid]->password_history[] = $record;
  }
}

/**
 * Adds the history record for this user/created time.
 */
function password_policy_update_password_history($history) {
  db_merge('password_policy_history')
    ->key(array(
      'uid' => $history->uid,
      'created' => $history->created,
    ))
    ->fields(array(
      'pass' => $history->pass,
    ))
    ->execute();
}

/**
 * Implements hook_token_info().
 */
function password_policy_token_info() {
  $type = array(
    'name' => t('Password Expiration Date'),
    'description' => t('Tokens related to expired passwords.'),
    'needs-data' => 'password_expiration_date',
  );
  $formats = module_invoke_all('date_format_types');

  foreach ($formats as $name => $title) {
    $format[$name] = array(
      'name' => t('Expire Date @title Format', array('@title' => $title)),
      'description' => t('The Date the Password Expires in the @title Format.', array('@title' => $title)),
    );
  }
  $format['interval'] = array(
    'name' => t('Expire Date interval'),
    'description' => t('The Date the Password Expires in x days format'),
  );

  return array(
    'types' => array('password_expiration_date' => $type),
    'tokens' => array('password_expiration_date' => $format),
  );
}

/**
 * Implements hook_tokens().
 */
function password_policy_tokens($type, $tokens, $data, $options) {
  if ($type == 'password_expiration_date') {
    $replacements = array();
    foreach ($tokens as $key => $token) {
      if ($key = 'interval') {
        $replacements[$token] = format_interval($data['password_expiration_date'] - time());
      }
      else {
        $replacements[$token] = format_date($data['password_expiration_date'], $key);
      }
    }
    return $replacements;
  }
}

/**
 * Implements hook_mail().
 */
function password_policy_mail($key, &$message, $params) {
  $language = $message['language'];
  $message['subject'] .= $params['subject'];
  $message['body'][] = $params['body'];
}

/**
 * Helper function to get number of seconds represented by relative time string.
 *
 * @param string $string
 *   The time interval string to parse - like 20 minutes or 4 weeks
 * @param bool $report_errors
 *   Whether or not to set a message if the string can't be parsed
 *
 * @return int
 *   Number of seconds in the interval
 */
function password_policy_parse_interval($string, $report_errors = FALSE) {
  $int = strtotime($string, 0);

  if ($report_errors && $int === FALSE) {
    drupal_set_message(t("Unable to parse time interval. Please use something like '1 day' or 2 weeks'."), 'error');
  }

  return $int;
}

/**
 * Implements hook_default_password_policy_alter().
 */
function password_policy_default_password_policy_alter(&$policies) {
  // Only display this policy if no other policies are defined.
  if (count($policies) > 0) {
    return;
  }

  $config = array(
    'alpha_count' => array(
      'alpha_count' => '1',
    ),
    'char_count' => array(
      'char_count' => '8',
    ),
    'consecutive' => array(
      'consecutive_char_count' => '',
    ),
    'int_count' => array(
      'int_count' => '1',
    ),
    'past_passwords' => array(
      'past_passwords' => '3',
    ),
    'symbol_count' => array(
      'symbol_count' => 1,
      'symbol_count_symbols' => '!@#$%^&*()_+=-|}{"?:><,./;\'\\[]',
    ),
    'username' => array(
      'enabled' => FALSE,
    ),
    'role' => array(
      'roles' => array(
        2 => 0,
        3 => 0,
      ),
    ),
    'expire' => array(
      'expire_limit' => '0',
      'expire_warning_email_sent' => '-14 days',
      'expire_warning_email_message' => '',
      'expire_warning_email_subject' => '[user:name] you password on [site:name] shall expire in [password_expiration_date:interval] ',
    ),
  );

  $password_policy = new stdClass();
  $password_policy->disabled = TRUE; /* Edit this to true to make a default password_policy disabled initially */
  $password_policy->api_version = 1;
  $password_policy->name = 'Example policy';
  $password_policy->config = serialize($config);
  $policies['Example policy'] = $password_policy;
}

/**
 * Implements hook_password_policy_expire_url_exclude().
 */
function password_policy_password_policy_expire_url_exclude($account) {
  // Do not redirect on ajax requests.
  if ((arg(0) == 'system' || arg(0) == 'file') && arg(1) == 'ajax') {
    return FALSE;
  }

  // Allow users to logout!
  if (arg(0) == 'user' && arg(1) == 'logout') {
    return FALSE;
  }

  // Do not do anything if the user is doing the core email validation step.
  if (arg(0) == 'user' && arg(1) == 'reset' && is_string(arg(2))) {
    return FALSE;
  }

  // Do not do anything if the user is doing the LoginToboggan validation
  // process.
  if (module_exists('logintoboggan')) {
    if (arg(0) == 'user' && arg(1) == 'validate' && is_string(arg(2))) {
      return FALSE;
    }
  }

  // Do not do anything if the user is using a urllogin link.
  if (module_exists('urllogin')) {
    if (arg(0) == 'l' && is_string(arg(1))) {
      return FALSE;
    }
  }
}

/**
 * Implements hook_user_delete().
 */
function password_policy_user_delete($account) {
  db_delete('password_policy_history')
    ->condition('uid', $account->uid)
    ->execute();
}
