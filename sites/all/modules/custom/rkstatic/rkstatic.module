<?php

/**
 * @file
 * Riigikantselei staatiline.
 * MÃ¤rt Matsoo. mart@matsoo.com.
 */


/**
 * Implementation of hook_init().
 */
function rkstatic_init() {

  // Load css.
  // drupal_add_css(drupal_get_path('module', 'rkstatic') . '/css/rkstatic.css');

  // Load js.
  // drupal_add_js(drupal_get_path('module', 'rkstatic') . '/js/rkstatic.js', array('scope' => 'footer', 'weight' => 10));

  //drupal_add_js('jQuery(document).ready(function () { var S5 = "do this and do that";//alert(S5); });', array('type' => 'inline', 'scope' => 'header'));

}


/**
 * Implementation of hook_permission().
 */
function rkstatic_permission() {

  $perms = array(
    'admin rkstatic' => array(
      'title' => t('Administer Riigikantselei Static Module'),
      'description' => t('Full administrator access for Riigikantselei Static Module.'),
      'restrict access' => FALSE,
    ),
  );

  return $perms;

}


/**
 * Implementation of hook_menu().
 */
function rkstatic_menu() {

  $items = array();

  $items['admin/config/rkstatic'] = array(
    'title' => 'Riigikantselei Static Module Items',
    'access arguments' => array('admin rkstatic'),
    'position' => 'right',
    'weight' => 99,
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/rkstatic/settings'] = array(
    'title' => 'Riigikantselei Static Module Settings',
    'description' => t('General settings form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rkstatic_settings'),
    'access arguments' => array('admin rkstatic'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
  );

  return $items;
}


/**
 * Form builder for general settings form.
 */
function rkstatic_settings($form, &$form_state) {

  $form = array();

  /* $form['rkstatic_switch'] = array(
    '#type' => 'checkbox',
    '#title' => t('Turn on Riigikantselei static functionality'),
    '#default_value' => variable_get('rkstatic_switch', 0),
    '#description' => t('Default on/off switch for module.'),
  );

  $form['rkstatic_paths'] = array(
    '#type' => 'textarea',
    '#title' => t('Paths to save statically'),
    '#default_value' => variable_get('rkstatic_paths', 'et'),
    '#description' => t('The pages we want to save statically.'),
  ); */

  $form['rkstatic_view_to_use'] = array(
    '#type' => 'textfield',
    '#title' => t('Machine name of View'),
    '#default_value' => variable_get('rkstatic_view_to_use', 'ddos'),
    '#description' => t('Default is "ddos". This view needs to return a list of paths for pages we wish to save statically. See the rkstatic module README file for the view definition which can be copied and pasted at Views import page.'),
  );

  $form['rkstatic_static_subdomain'] = array(
    '#type' => 'textfield',
    '#title' => t('Static domain'),
    '#default_value' => variable_get('rkstatic_static_subdomain', 'staatiline.riigikantselei.ee'),
    '#description' => t('The domain for the static site. Used in building absolute links. ex. static.valitsus.ee. You do not need the http://'),
  );

  $form['rkstatic_force_http_origin'] = array(
    '#type' => 'textfield',
    '#title' => t('Replace $_SERVER[\'HTTP_ORIGIN\']'),
    '#default_value' => variable_get('rkstatic_force_http_origin', 'valitsus.ee'),
    '#description' => t('The http origin variable is shaky in $_SERVER super global. (ie. It may not exist in every environment.) Name your domain here, do not include http(s)://.'),
  );  

  $form['copy'] = array(
    '#type' => 'fieldset',
    '#title' => t('Resource Copying'),
    '#description' => t('The html_export process may fail to copy all resources over to static folder. This sweeps through some important subfolders and copies their contents.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );   
  
  $form['copy']['rkstatic_copy_img'] = array(
    '#type' => 'checkbox',
    '#title' => t('Copy vp_profile images'),
    '#default_value' => variable_get('rkstatic_copy_img', 1),
    '#description' => t('/profiles/vp_profile/theme/vp_theme/img has all sorts of images that we may need.'),
  );  

  $form['copy']['rkstatic_copy_printcss'] = array(
    '#type' => 'checkbox',
    '#title' => t('Copy print.css'),
    '#default_value' => variable_get('rkstatic_copy_printcss', 1),
    '#description' => t('VP_theme has print.css file that gets called from static.'),
  );

  $form['kontakt'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contact Page'),
    '#description' => t('HTML clean-up options for contact page.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );  

  $form['kontakt']['rkstatic_clean_contact_links'] = array(
    '#type' => 'checkbox',
    '#title' => t('Convert links to plain text on contact page'),
    '#default_value' => variable_get('rkstatic_clean_contact_links', 0),
    '#description' => t('Get rid of links that open contact pop-ups for workers.'),
  );  

  $form['kontakt']['rkstatic_kill_contact_popup'] = array(
    '#type' => 'checkbox',
    '#title' => t('Suppress contact pop-ups (manual build)'),
    '#default_value' => variable_get('rkstatic_kill_contact_popup', 0),
    '#description' => t('<p>Contact page hidden dialogues are not needed for static version. Suppress them temporarily but do not forget to uncheck this after the static site is made!</p><p>Cron job suppresses them automatically. This variable is actually used in a theme template file.<br /> /profiles/vp_profile/themes/vp_theme/templates/views-view-table--contact--page.tpl.php</p>'),
  );

  $form['rkstatic_build_from_menu_links'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include main menu links'),
    '#default_value' => variable_get('rkstatic_build_from_menu_links', 0),
    '#description' => t('Include all main menu links in static build.'),
  );

  $form['crisis'] = array(
    '#type' => 'fieldset',
    '#title' => t('HTML Insert'),
    '#description' => t('Insert custom html into top of each static page.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );  

  $form['crisis']['rkstatic_use_crisis_header'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Crisis Header'),
    '#default_value' => variable_get('rkstatic_use_crisis_header', 0),
    '#description' => t('Insert html code into header of each static page.'),
  );

  $form['crisis']['rkstatic_crisis_header'] = array(
    '#type' => 'textarea',
    '#title' => t('Crisis Header HTML'),
    '#default_value' => variable_get('rkstatic_crisis_header', ''),
    '#description' => t('Option to include special header on all static pages.'),
  );

  $form['cron'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cron'),
    '#description' => t('Settings to run static build only at night and not very often. Checking "Run with Cron" will display more settings.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['cron']['rkstatic_use_cron'] = array(
    '#type' => 'checkbox',
    '#title' => t('Run with Cron'),
    '#default_value' => variable_get('rkstatic_use_cron', 0),
    '#description' => t('Switch on ability to build automatically with cron.'),
  );  

  $form['cron']['rkstatic_min_cron_interval'] = array(
    '#type' => 'select',
    '#title' => t('Hours Between Cron Builds'),
    '#options' => array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23'),
    '#default_value' => variable_get('rkstatic_min_cron_interval', '8'),
    '#description' => t('Minimum time between static site builds.'),
    '#states' => array(
      'invisible' => array(
       ':input[name="rkstatic_use_cron"]' => array('checked' => FALSE),
      ),
    ),
  );

  $form['cron']['rkstatic_time_range_start'] = array(
    '#type' => 'select',
    '#title' => t('Do Not Build Before (a.m.)'),
    '#options' => array('1' => '1', '2' => '2', '3' => '3'),
    '#default_value' => variable_get('rkstatic_time_range_start', '3'),
    '#description' => t('Only do build at night, between hours of...'),
    '#states' => array(
      'invisible' => array(
       ':input[name="rkstatic_use_cron"]' => array('checked' => FALSE),
      ),
    ),    
  );

  $form['cron']['rkstatic_time_range_end'] = array(
    '#type' => 'select',
    '#title' => t('Do Not Build After (a.m.)'),
    '#options' => array('4' => '4', '5' => '5', '6' => '6'),
    '#default_value' => variable_get('rkstatic_time_range_end', '6'),
    '#description' => t('Only do build at night, between hours of...'),
    '#states' => array(
      'invisible' => array(
       ':input[name="rkstatic_use_cron"]' => array('checked' => FALSE),
      ),
    ),    
  );

  $form['cron']['rkstatic_cron_markup'] = array(
    '#type' => 'markup',
    '#markup' => t('<div class="description">If we "Run with Cron", the purpose of these cron settings is to limit the time between static site builds and to only run them at night. We don\'t want the system needlessly running these builds on every cron job throughout the day.</div>'),   
  );  

  $form['debug'] = array(
    '#type' => 'fieldset',
    '#title' => t('Debug'),
    '#description' => t('Allow for rk watchdog statements during execution.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  ); 

  $form['debug']['rkstatic_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Turn on debugging'),
    '#default_value' => variable_get('rkstatic_debug', 0),
    '#description' => t('Flag debugging on or off.'),
  );    

  return system_settings_form($form);
}


/**
 * drupal_alter of html_export function.
 * drupal_alter('html_export_add_path_provider', $path_provders);
 */
function rkstatic_html_export_add_path_provider_alter(&$path_provders) {
  $path_provders['rkstatic_custom_paths']['title'] = 'Riigikantselei static: Custom Paths';
  $path_provders['rkstatic_custom_paths']['callback'] = '_rkstatic_export_custom_paths';  
}

function rkstatic_html_export_add_path_provider() {
  // watchdog('rk', 'In rkstatic_html_export_add_path_provider from module_invoke_all');
}


/**
 * Implementation of hook_html_export_asset_list_alter().
 */
function rkstatic_html_export_asset_list_alter(&$asset_list) {

  // @todo. Not sure if this is the right place. But we should grab aggregated
  // css files and save them as resources locally. It seems the html_export module
  // just assumes it will access css/js files from original domain / web server.

  /* foreach ($asset_list as $key => $value) {    
    // Get rid of add this js.
    if (strstr($key, 'addthis') !== FALSE) {
      unset($asset_list[$key]);
    }
  } */
}



/**
 * This hook function from html_export API.txt file.
 * @data
 *   the html
 * @paths
 *   array of all paths being processed
 * @active_path_count
 *   string of the current path being processed
 * @dom_remove
 *   array of dom elements to be removed.
 */
function rkstatic_html_export_data_alter(&$data, $paths, $active_path_count, $dom_remove) {

  // Create a DOM object.
  $html_obj = new simple_html_dom();
  // Load HTML from a string.
  $html_obj->load($data);

  // Tuimalt kopeeri kÃµik preprocess css / js.
  $folders = scandir($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export');
  $activefolder = array_pop($folders);
  $csssrc = $_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/css';
  $cssdst = $_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/sites/default/files/css';
  $jssrc = $_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/js';
  $jsdst = $_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/sites/default/files/js';

  // Make the css and js folders here.
  if (!file_exists($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/sites/default/files/css')) {    
    mkdir($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/sites/default/files/css', 0775, true);
  }
  if (!file_exists($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/sites/default/files/js')) {    
    mkdir($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/sites/default/files/js', 0775, true);
  }
  if (!file_exists($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/sites/default/files/js/wysiwyg')) {    
    mkdir($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/sites/default/files/js/wysiwyg', 0775, true);
  }

  // Copy preprocessed css files.
  _rkstatic_recurse_copy($csssrc, $cssdst);
  // Copy preprocessed js files.
  _rkstatic_recurse_copy($jssrc, $jsdst);  

  // @todo. Kopeeri teema img failid ka? Add conditional for settings.
  $copy_img = variable_get('rkstatic_copy_img', 1);
  if ($copy_img) { // 
    $imgsrc = $_SERVER['DOCUMENT_ROOT'] . '/profiles/vp_profile/themes/vp_theme/img';
    $imgdst = $_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/profiles/vp_profile/themes/vp_theme/img';

    // Make the vp_profile img folders here.
    if (!file_exists($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/profiles/vp_profile/themes/vp_theme/img/10-global')) {      
      mkdir($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/profiles/vp_profile/themes/vp_theme/img/10-global', 0775, true);
    }
    if (!file_exists($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/profiles/vp_profile/themes/vp_theme/img/20-default')) {      
      mkdir($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/profiles/vp_profile/themes/vp_theme/img/20-default', 0775, true);
    }
    if (!file_exists($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/profiles/vp_profile/themes/vp_theme/img/30-tablet')) {
      mkdir($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/profiles/vp_profile/themes/vp_theme/img/30-tablet', 0775, true);      
    }
    if (!file_exists($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/profiles/vp_profile/themes/vp_theme/img/40-desktop')) {      
      mkdir($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/profiles/vp_profile/themes/vp_theme/img/40-desktop', 0775, true);
    }
    if (!file_exists($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/profiles/vp_profile/themes/vp_theme/img/example-content')) {      
      mkdir($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/profiles/vp_profile/themes/vp_theme/img/example-content', 0775, true);
    } 

    // Copy img files.
    _rkstatic_recurse_copy($imgsrc, $imgdst);    
  }

  $copy_printcss = variable_get('rkstatic_copy_printcss', 1);
  if ($copy_printcss) { // 
    $printcsssrc = $_SERVER['DOCUMENT_ROOT'] . '/profiles/vp_profile/themes/vp_theme/css';
    $printcssdst = $_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/profiles/vp_profile/themes/vp_theme/css';

    // Make the vp_profile themecss folders here.
    if (!file_exists($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/profiles/vp_profile/themes/vp_theme/css')) {      
      mkdir($_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/html_export/' . $activefolder . '/profiles/vp_profile/themes/vp_theme/css', 0775, true);
    }        
  
    // Single file, use regular copy function.
    copy($printcsssrc . '/print.css', $printcssdst . '/print.css');
  }  

  // Live site will have https.
  $protocol = (isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) == 'on') ? 'https://' : 'http://';

  if (variable_get('rkstatic_debug', 0) == 1) {
    watchdog('rk', 'protocol ' . $protocol . ' SERVER[HTTPS]: ' . $_SERVER['HTTPS']);    
  }

  $arr_find = array('link', 'script');
  foreach ($arr_find as $tag) {
    foreach ($html_obj->find($tag) as $link) {

      if (($link->href != '' || $link->src != '') && strpos($link->href, 'googleapis') == 0) {

        if (strlen($link->href) > 0) {
          $link->href = str_replace($protocol . $_SERVER['HTTP_HOST'] . '/', $protocol . variable_get('rkstatic_static_subdomain') . '/', $link->href);
              if (variable_get('rkstatic_debug', 0) == 1) {
                watchdog('rk', 'link->href ' . $link->href . ' protocol . _SERVER[HTTP_HOST] ' . $protocol . $_SERVER['HTTP_HOST']);
              }          
        }
        else { // Assume src.
          $link->src = str_replace($protocol . $_SERVER['HTTP_HOST'] . '/', $protocol . variable_get('rkstatic_static_subdomain') . '/', $link->src);
              if (variable_get('rkstatic_debug', 0) == 1) {
                watchdog('rk', 'link->src ' . $link->src . ' protocol . _SERVER[HTTP_HOST] ' . $protocol . $_SERVER['HTTP_HOST']);
              }      
        }

      }
    }
  }

  if (variable_get('rkstatic_use_crisis_header', 0) == 1) {
    // Put ddos warning into head.
    foreach ($html_obj->find('#skip-link') as $skip) {
      $orig = $skip->outertext;
      $pre = variable_get('rkstatic_crisis_header', '');
      $skip->outertext = $pre . $orig;
    }
  }

  // @todo. Should we make all anchors, src, href values absolute?
  // foreach ($html_obj->find('a') as $links) {
    // $links->href = $protocol . variable_get('rkstatic_static_subdomain') . $links->href;
  // }

  // Get rid of <a> tags for kontakt page.
  $clean_contact_links = variable_get('rkstatic_clean_contact_links', 0);
  if ($clean_contact_links && (strstr($active_path_count, 'kontakt') !== FALSE || strstr($active_path_count, 'contact') !== FALSE)) {
    // Remove all plain text fragments.
    foreach ($html_obj->find('div.view-contact a') as $links) {
        // @todo. Get all simple dom clean-up done.
        $links->href = null;
        $links->tag = "span";
    }
  }

  // Get rid of <a> in node sub-pages.
  foreach ($html_obj->find('article div.content a') as $links) {
    // @todo. Get all simple dom clean-up done.
    $links->href = null;
    $links->tag = "span";
  }

  $data = $html_obj->save();

  // Last-ditch, carpet bomb cleaning. We do not want ..//s7.addthis or ..//fonts.googleapis.
  $data = str_replace("../../../../..//fonts.googleapis", $protocol . 'fonts.googleapis', $data);
  $data = str_replace("../../../..//fonts.googleapis", $protocol . 'fonts.googleapis', $data);
  $data = str_replace("../../..//fonts.googleapis", $protocol . 'fonts.googleapis', $data);
  $data = str_replace("../..//fonts.googleapis", $protocol . 'fonts.googleapis', $data);
  $data = str_replace("..//fonts.googleapis", $protocol . 'fonts.googleapis', $data);
  $data = str_replace("../../../../..//s7.addthis", $protocol . 's7.addthis', $data);
  $data = str_replace("../../../..//s7.addthis", $protocol . 's7.addthis', $data);
  $data = str_replace("../../..//s7.addthis", $protocol . 's7.addthis', $data);
  $data = str_replace("../..//s7.addthis", $protocol . 's7.addthis', $data);
  $data = str_replace("..//s7.addthis", $protocol . 's7.addthis', $data);  
  // $data = str_replace($protocol . $_SERVER['HTTP_HOST'] . '/', $protocol . variable_get('rkstatic_static_subdomain') . '/', $data);

  // Release resources to avoid memory leak in some versions.
  $html_obj->clear();
  unset($html_obj);
 
}


/**
 * From http://php.net/manual/en/function.copy.php comments.
 */
function _rkstatic_recurse_copy($src, $dst) { 
    $dir = opendir($src); 
    // mkdir($dst, 0775, true); 
    while(false !== ( $file = readdir($dir)) ) { 
        if (( $file != '.' ) && ( $file != '..' )) { 
            if ( is_dir($src . '/' . $file) ) { 
                _rkstatic_recurse_copy($src . '/' . $file, $dst . '/' . $file);
            } 
            else { 
                copy($src . '/' . $file,$dst . '/' . $file); 
            } 
        } 
    } 
    closedir($dir); 
}


/**
 * Callback for rkstatic_custom provider.
 */
function _rkstatic_export_custom_paths() {

  // The ddos view has the last X uudised, but we need to get the aliases.
  $view = views_get_view(variable_get('rkstatic_view_to_use', 'ddos'));
  $view->render();

  $news_aliases = array();
  foreach ($view->result as $key => $value) {
    $news_aliases[] = 'et/' . drupal_get_path_alias('node/' . $value->nid);
  }  

  if (variable_get('rkstatic_build_from_menu_links', 0) == 1) {
    $menu_links = menu_load_links('main-menu'); 

    foreach ($menu_links as $key => $menu) {
      if (strstr($menu['link_path'], 'node/') !== FALSE) {
        $menu_aliases[] = 'et/' . drupal_get_path_alias($menu['link_path']);
      }
    }
  }

  // Add in the menu aliases if they were selected.
  $result = (isset($menu_aliases)) ? array_merge($menu_aliases, $news_aliases) : $news_aliases;

  return $result;
}


/**
 * Implements hook_cron().
 */
function rkstatic_cron() {
  // Only run if switched on from rkstatic module settings page.
  if (variable_get('rkstatic_use_cron', 0) == 1) {    
    // First time should run and then the rkstatic_cron_last_run will get set.
    $rkstatic_last_cron_build = variable_get('rkstatic_cron_last_run', 0);

    // Unsuppress contact pop-ups in case they are still suppressed after last static batch.
    variable_set('rkstatic_kill_contact_popup', 0);

    // Use settings to ask whether we should build on this cron run.
    $min_cron_interval = variable_get('rkstatic_min_cron_interval', '8');
    $night_time_start = variable_get('rkstatic_time_range_start', '3');
    $night_time_end = variable_get('rkstatic_time_range_end', '6');

    // Array with allowed time range for night builds. (ex. Allow between 3-5 a.m.)
    for($i = $night_time_start;$i <= $night_time_end;$i++) {
      $allowed_night_time_range[] = $i;
    }

    // Check that sufficient time has passed since last cron build and whether it is late at night.
    if ($rkstatic_last_cron_build + (3600 * $min_cron_interval) <= REQUEST_TIME && in_array(date('G', REQUEST_TIME), $allowed_night_time_range)) {
      watchdog('rk', t('<p>Running rkstatic build using cron. rkstatic last cron static build: ' . date('H:i:s d.m.Y', $rkstatic_last_cron_build) . '</p>'));
      variable_set('rkstatic_cron_last_run', REQUEST_TIME);

      // Suppress contact pop-ups. They should be unsuppressed in rkstatic_cron_finished().
      variable_set('rkstatic_kill_contact_popup', 1);

      // Run html_export batch.
      _rkstatic_run_html_export_batch();
    }
  }
}


/**
 * Run html_export module batch process.
 * Called from hook_cron().
 */
function _rkstatic_run_html_export_batch() {

  // require_once(drupal_get_path('module', 'html_export') . '/html_export.pages.inc');

  // Grab paths defined in html_export interface and manual render.
  $rkstatic_paths = _rkstatic_export_custom_paths();
  $html_export_other_paths = explode("\n", variable_get('html_export_other_paths'));

// watchdog('rk', 'other paths <pre>' . print_r($html_export_other_paths, true) . '</pre>');

  // Merge all paths into one array for batch job.
  // $paths = array_merge($rkstatic_paths, $html_export_other_paths);

  // sort($html_export_other_paths);
// watchdog('rk', 'paths <pre>' . print_r($paths, true) . '</pre>');

  // Get rid of space at end of each path.
  $arrTmp = array();  
  foreach ($html_export_other_paths as $value) {
    $arrTmp[] = trim($value);
  }

  // Merge all paths into one array for batch job.
  $paths = array_merge($rkstatic_paths, $arrTmp);

  sort($paths);

  // Grab dom removal items as per html_export config.
  $dom_remove = explode("\n", variable_get('html_export_dom_remove', ''));

  // Give defaults to other variables for batch job.
  $anonymous = TRUE; // Render as anonymous user.
  $front_found = TRUE; // Only makes sense to have <front> in list of rendered pages.
  $render_errors = 1; // Do not render pages returning 403, 404, 500 etc.

  // $export_path = 'export' . REQUEST_TIME; // $dir . '/' . $export_folder; ex. 'sites/default/files/html_export' . '/' . 'export1409041696'
  // $export_path = variable_get('file_' . file_default_scheme() . '_path', conf_path() . '/files') . '/html_export' . '/' . 'export' . REQUEST_TIME;
  $export_path = variable_get('file_' . file_default_scheme() . '_path', conf_path() . '/files') . '/html_export' . '/export' . REQUEST_TIME;
  $uid = 0; // 0 is anonymous user.
  $format = 'none'; // None means save files in sites/default/files/html_export rather than as a tar.


  // Function html_export_render_pages builds asset_list in this context array.
  // $context = array();
  // $context['sandbox']['progress'] = 0;
  // $context['sandbox']['max'] = count($paths);
  // $context['results']['paths'] = array();
  // $context['results']['asset_list'] = array();

  // Copy/paste $batch array definition from html_export.pages.inc
  $batch = array(
    'operations' => array(
      array('html_export_render_pages', array($paths, $export_path, $dom_remove, $anonymous, $front_found, $render_errors)),
      array('html_export_copy_all_resources', array($export_path)),
      array('html_export_cleanup', array($export_path, $uid, $format)),
    ),
    'finished' => 'rkstatic_cron_finished', // html_export_finished
    'title' => t('Processing rkstatic cron using html export'),
    'init_message' => t('The rkstatic cron batch is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('RK static has encountered an error.'),
    'file' => drupal_get_path('module', 'html_export') . '/html_export.pages.inc',
    'timestamp' => REQUEST_TIME, // Batch job was giving undefined index timestamp so putting it here manually.
  );

  // From https://www.drupal.org/node/988192#comment-7132232
  batch_set($batch);
  $batch = &batch_get();
  $batch['progressive'] = FALSE;
  batch_process(NULL);

  // Use background batch module which is part of background_process.
  /*if (module_exists('background_batch')) {
    background_batch_process_batch(NULL); // Pass null since no drupal_goto at end of job.
  }
  else {
    if (function_exists('watchdog')) {
      watchdog('rkstatic', t('Background Batch module needs to be enabled for rkstatic\'s cron job to work.'));
    }
  }*/

  // @todo and test. Manually turn back on preprocessors for css and js?
  // variable_set('preprocess_css', 1);
  // variable_set('preprocess_css', 1);
}


/**
 * Batch 'finished' callback
 * This function taken from html_export and modified.
 */
function rkstatic_cron_finished($success, $results, $operations) {
  if ($success) {
    // Make sure contact page pop-ups are not suppressed anymore.
    variable_set('rkstatic_kill_contact_popup', 0);
    watchdog('rk', t('rkstatic cron batch finished <pre>' . print_r($results, true) . '</pre>'));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    watchdog('rk', $message);
  }
}
