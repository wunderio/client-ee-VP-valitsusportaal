<?php

/**
 * @file
 * Riigikantselei abimoodul. css / js, mis ei ole vp pakettis.
 * MÃ¤rt Matsoo. mart@matsoo.com.
 */


/**
 * Implementation of hook_init().
 */
function rk_abi_init() {

  // Load css.
  drupal_add_css(drupal_get_path('module', 'rk_abi') . '/css/rk_abi.css');

  // Load js.
  drupal_add_js(drupal_get_path('module', 'rk_abi') . '/js/rk_abi.js', array('scope' => 'footer', 'weight' => 10));

  //drupal_add_js('jQuery(document).ready(function () { var S5 = "do this and do that";//alert(S5); });', array('type' => 'inline', 'scope' => 'header'));

}


/**
 * Implementation of hook_permission().
 */
function rk_abi_permission() {

  $perms = array(
    'admin riigikantselei abimoodul' => array(
      'title' => t('Administer Riigikantselei Helper Module'),
      'description' => t('Full administrator access for Riigikantselei Helper Module.'),
      'restrict access' => FALSE,
    ),
  );

  return $perms;

}


/**
 * Implementation of hook_menu().
 */
function rk_abi_menu() {

  $items = array();

  $items['admin/config/rkabi'] = array(
    'title' => 'Riigikantselei Abimoodul',
    'access arguments' => array('admin riigikantselei abimoodul'),
    'position' => 'right',
    'weight' => 49,
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/rkabi/settings'] = array(
    'title' => 'Riigikantselei Abimoodul Settings',
    'description' => t('General settings form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rk_abi_settings'),
    'access arguments' => array('admin riigikantselei abimoodul'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
  );

  return $items;
}


/**
 * Page callback from hook_menu().
 */
function rk_abi_createstatic() {
  // Build static pages, ready for ddos.
}


/**
 * Implements hook_exit().
 */
function rk_abi_exit() {

  // Testing to see best way to save html statically.
  // Kind of works, but need to get all the css/js/img files too.
  // $data = ob_get_contents();
  // watchdog('rk', $data);
}


/**
 * Form builder for general settings form.
 */
function rk_abi_settings($form, &$form_state) {

  $form = array();

  $form['rk_abi_newsletters_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Newsletter Settings'),
    '#description' => t('Optional blocks and functionality for newsletters.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['rk_abi_newsletters_fieldset']['rk_abi_social_media_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Social Media Block in Newsletter Footer'),
    '#description' => t('Insert block into newsletter footer. Envisioned as place to put social media links.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );  

  $form['rk_abi_newsletters_fieldset']['rk_abi_social_media_fieldset']['rk_abi_newsletter_use_social_media_insert_block'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use social media footer block in newsletters'),
    '#default_value' => variable_get('rk_abi_newsletter_use_social_media_insert_block', 0),
    '#description' => t('Turn on/off the insertion of this block at the bottom of newsletters.'),
  );

  $form['rk_abi_newsletters_fieldset']['rk_abi_social_media_fieldset']['rk_abi_newsletter_social_media_insert'] = array(
    '#type' => 'select',  // 'textfield',
    '#title' => t('Block ID to use as social media footer block'),
    '#options' => _rk_abi_block_list(),
    '#default_value' => variable_get('rk_abi_newsletter_social_media_insert', '-1'),
    '#description' => t('This block can be created and used in the footer of press releases and other newsletters. You can use it to include links to Facebook, Twitter etc. You have to create this block by hand. Blocks are found at Structure -> Blocks.'),
  );

  $form['rk_abi_newsletters_fieldset']['rk_abi_newsletter_logo_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Logos in Newsletters'),
    '#description' => t('<p>Options to insert blocks at beginning of newsletter. Envisioned for logos.</p><p>NB: "Add logos to newsletters" checkbox must be checked for any logo block insertion to function.</p>'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );   

  $form['rk_abi_newsletters_fieldset']['rk_abi_newsletter_logo_fieldset']['rk_abi_use_custom_newsletter_logos'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add logos to newsletters'),
    '#default_value' => variable_get('rk_abi_use_custom_newsletter_logos', 0),
    '#description' => t('Turn this functionality on / off universally. The settings below will not override this master setting. Insert a pre-defined logo into newsletter header. Works in conjunction with simplenews template file found at /profiles/vp_profile/themes/vp_theme/templates/simplenews-newsletter-body.tpl.php'),
  );


  // Find all newsletters and build logo settings for them.
  $vocab = taxonomy_vocabulary_machine_name_load('newsletter');
  $all_newsletters = taxonomy_get_tree($vocab->vid);

  foreach ($all_newsletters as $key => $value) {
    $form['rk_abi_newsletters_fieldset']['rk_abi_newsletter_logo_fieldset']['rk_abi_indiv_newsletter_setting_' . $value->tid] = array(
      '#type' => 'fieldset',
      '#title' => t('Settings for @newsletter newsletter', array('@newsletter' => $value->name)),
      '#description' => t('Individual options for newsletter customisation.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['rk_abi_newsletters_fieldset']['rk_abi_newsletter_logo_fieldset']['rk_abi_indiv_newsletter_setting_' . $value->tid]['rk_abi_show_site_name_in_newsletter_' . $value->tid] = array(
      '#type' => 'checkbox',
      '#title' => t('Show site name as main heading in @newsletter newsletter template', array('@newsletter' => $value->name)),
      '#default_value' => variable_get('rk_abi_show_site_name_in_newsletter_' . $value->tid, 1),
      '#description' => t('Display or hide site name. Default is to display.'),
    );

    $form['rk_abi_newsletters_fieldset']['rk_abi_newsletter_logo_fieldset']['rk_abi_indiv_newsletter_setting_' . $value->tid]['rk_abi_logo_newsletter_' . $value->tid] = array(
      '#type' => 'select',
      '#title' => t('Block ID to use for logo in @newsletter', array('@newsletter' => $value->name)),
      '#description' => t('Leave blank to forego logo.'),
      '#options' => _rk_abi_block_list(),
      '#default_value' => variable_get('rk_abi_logo_newsletter_' . $value->tid, '-1'),
    );
  }


  $form['rk_abi_clean_old_crap_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Stripping inline styles for old content'),
    '#description' => t('Settings used by custom Riigikantselei input filter. Its name is "Riigikantselei Remove Inline Styles from Old Content" and can be switched on/off for each ' . l('text format', 'admin/config/content/formats', array('attributes' => array('title' => 'Text format admin page', 'class' => 'rk-abi'))) . '. (ex. Filtered HTML, Full HTML etc.)'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );  

  $form['rk_abi_clean_old_crap_fieldset']['rk_abi_clean_old_crap_tags'] = array(
    '#type' => 'textfield',
    '#title' => t('Inline Styles Stripped for Tags'),
    '#default_value' => variable_get('rk_abi_clean_old_crap_tags', ''),
    '#description' => t('<p>HTML tags to clean. Leave a space between tags, do not use brackets. (ex. "p span div")</p><p>Background info: This module has a custom input filter ("Riigikantselei Remove Inline Styles from Old Content") that will get rid of inline styles (as in &lt;p style="font-family: comic sans ms;"&gt;) from old content, ostensibly to be used for imported news articles that might be full of inline styles suited to their original site design. Here we can define the html tags that will have their inline styles stripped.</p>'),
  );

  $form['rk_abi_clean_old_crap_fieldset']['rk_abi_clean_old_crap_date'] = array(
    '#type' => 'textfield',
    '#title' => t('Old Content is Before'),
    '#default_value' => variable_get('rk_abi_clean_old_crap_date', '2014-01-01'),
    '#description' => t('Any content with a created date earlier than this is considered old and will have inline styles stripped from defined tags.'),
  );

  $form['rk_abi_security_options_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Security Options'),
    '#description' => t('These options turned on or "secured" by default.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['rk_abi_security_options_fieldset']['rk_abi_autocomplete_off'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add autocomplete=off to forms'),
    '#default_value' => variable_get('rk_abi_autocomplete_off', 1),
    '#description' => t('Forms with autocomplete parameter set to "off" tells browser not to remember and display former field entries. (usernames etc.)'),
  );

  return system_settings_form($form);
}


/**
 * Implements hook_preprocess_html().
 */
function rk_abi_preprocess_html(&$variables) {

  // Get domain name from http_host variable.
  if (isset($_SERVER['HTTP_HOST'])) {
    $arrDomain = explode('.', $_SERVER['HTTP_HOST']);
    $index = sizeof($arrDomain) - 2;

    // Add domain (ex. riigikantselei) to body classes. We can hook off it to apply styles to specific sites.
    $variables['classes_array'][] = $arrDomain[$index];
  }
}


/**
 * Abifunktsioon, obfuscate e-postid.
 * Siit: http://www.maurits.vdschee.nl/php_hide_email/
 */
function _rk_peida_email($email) { 
  $character_set = '+-.0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
  $key = str_shuffle($character_set); $cipher_text = ''; $id = 'e'.rand(1,999999999);

  for ($i=0;$i<strlen($email);$i+=1) $cipher_text.= $key[strpos($character_set,$email[$i])];
  $script = 'var a="'.$key.'";var b=a.split("").sort().join("");var c="'.$cipher_text.'";var d="";';
  $script.= 'for(var e=0;e<c.length;e++)d+=b.charAt(a.indexOf(c.charAt(e)));';
  $script.= 'document.getElementById("'.$id.'").innerHTML="<a href=\\"mailto:"+d+"\\">"+d+"</a>"';
  $script = "eval(\"".str_replace(array("\\",'"'),array("\\\\",'\"'), $script)."\")"; 
  $script = '<script type="text/javascript">/*<![CDATA[*/'.$script.'/*]]>*/</script>';
  return '<span id="'.$id.'">[javascript protected email address]</span>'.$script;

}  


/**
 * Implements hook_filter_info_alter().
 *
 * Perform alterations on filter definitions.
 *
 * @param $info
 *   Array of information on filters exposed by hook_filter_info()
 *   implementations.
 */
function rk_abi_filter_info_alter(&$info) {
  // Check for evidence of simplenews and turn off regular email obfuscation. Ex. node/3745/simplenews
  if (arg(0) == 'node' && arg(2) == 'simplenews') {
    $info['geo_filter_filter']['process callback'] = 'rk_abi_plain_text_email';
  }
}


/**
 * Do not want geo_filter obfuscated emails in newsletters.
 * Called from rk_abi_filter_info_alter when simplenews has been detected.
 * Just returning text without any filtering.
 */
function rk_abi_plain_text_email($text, $filter, $format, $langcode, $cache, $cache_id) {
  return $text;
}



/**
 * Implements hook_filter_info().
 * From http://definitivedrupal.org/suggestions/how-make-custom-input-filter
 */
function rk_abi_filter_info() {
  $filters['rk_abi_clean_crap'] = array(
    'title' => t('Riigikantselei Remove Inline Styles from Old Content'),
    'description' => t('Get rid of inline styles for old (imported) content.'),
    'process callback' => '_rk_abi_filter_process',
    // 'prepare callback' => '_rk_abi_filter_prepare',    
    // 'tips callback' => '_rk_abi_filter_tips',
    'cache' => FALSE, // Live system needs to have TRUE otherwise performance hit.
  );
  return $filters;
}

/**
 * Implements filter prepare callback.
 */
function _rk_abi_filter_prepare() {
}


/**
 * Implements filter process callback.
 * Using to strip inline styles from old content.
 */
function _rk_abi_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  // Load the node and then make sure it is old.
  $node = node_load(arg(1));
  if (isset($node->nid) && date('Y-m-d', $node->created) < variable_get('rk_abi_clean_old_crap_date', '2014-01-01')) {

    $html_dom = filter_dom_load($text);

    // Clean inline styles from these tags. @todo. Make this array configurable on settings page. 
    $tags = explode(' ', variable_get('rk_abi_clean_old_crap_tags'));
    foreach ($tags as $tag) {
      $elements = $html_dom->getElementsByTagName($tag);
      foreach ($elements as $element) {
        if ($element->getAttribute('style') != '') {
          $element->setAttribute('style', '');
          $element->removeAttribute('style');
        }
        // Trying to get rid of xml:lang already defined php warning.
        if ($element->getAttribute('xml:lang') != '') {
          $element->setAttribute('xml:lang', '');
          $element->removeAttribute('xml:lang');
        }
        // $element->setAttribute('lang', '');
      }
    }

    $text = filter_dom_serialize($html_dom);

  }

  return trim($text);
}


/**
 * Helper function to return list of blocks.
 */
function _rk_abi_block_list() {

  // Using a function from block.admin.inc.
  module_load_include('inc', 'block', 'block.admin');

  // Using this to load all blocks.
  $blocks = block_admin_display_prepare_blocks('vp_theme'); // delta info

  // Seed with no logo option.
  $options = array('-1' => t('-----')); // Leave logo block unassigned
  
  foreach ($blocks as $key => $value) {
    $options[$value['delta']] = $value['info'];
  }

  return $options;

}


/**
 * Implements filter tips callback.
 */
function _rk_abi_filter_tips() {
}


/**
 * Implements hook_menu_alter().
 * Trying to unset "Reply" link that is displayed in each comment.
 * We do not want people to be able to reply to indiv comments.
 * We can always hide with css, but that doesn't disable the actual menu path
 * like we are trying to do here. mm 8.sep.14.
 */
function rk_abi_menu_alter(&$items) {  
  // $items['comment/reply/%node']['access callback'] = FALSE;
  // watchdog('rk', 'menu alter <pre>' . print_r($items, true) . '</pre>');
}


/**
 * Implements hook_form_alter().
 */
function rk_abi_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('rk_abi_autocomplete_off', 1) === 1) {
    // Add autocomplete=off to all forms, security best practice. mm 07.10.2014.
    $form['#attributes']['autocomplete'] = 'off';
  }
}

